@prefix : <https://vivoweb.org/ontology/vitro-dynamic-api/gesah/export_cultural_object_to_lido/> .
@prefix dynapi: <https://vivoweb.org/ontology/vitro-dynamic-api#> .

:parameter_xml_transformation_rules dynapi:defaultValue

"""<?xml version="1.0" encoding="UTF-8"?>
    <xsl:stylesheet version="2.0"
        xmlns="http://www.lido-schema.org"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
        xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
        xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
        xmlns:vitro="http://vitro.mannlib.cornell.edu/ns/vitro/0.7#"
        xmlns:vivo="http://vivoweb.org/ontology/core#"
        xmlns:owl="http://www.w3.org/2002/07/owl#"
        xmlns:gesah="http://ontology.tib.eu/gesah/"
        xmlns:gml="http://www.opengis.net/gml"
        xmlns:doc="http://www.mda.org.uk/spectrumXML/Documentation"
        xmlns:sch="http://purl.oclc.org/dsdl/schematron"
        xmlns:skos="http://www.w3.org/2004/02/skos/core#"
        xmlns:tei="http://www.tei-c.org/ns/1.0"
        xmlns:lido="http://www.lido-schema.org"
        xmlns:xs="http://www.w3.org/2001/XMLSchema"
        xmlns:xsd="http://www.w3.org/2001/XMLSchema#"
        xmlns:xlink="http://www.w3.org/1999/xlink"
        xmlns:smil20lang="http://www.w3.org/2001/SMIL20/Language"
        xmlns:fn="http://www.w3.org/2005/xpath-functions"
        xmlns:rdf-xml-export="http://vivoweb.org/ontology/xml-export#"
        xmlns:local="sah:local" exclude-result-prefixes="local rdf-xml-export"
    >
        <xsl:output method="xml" indent="yes"/>

        <xsl:template name="terms-with-concept-id">
            <xsl:for-each select="./gesah:AAT_ID">
                <lido:conceptID lido:type="http://terminology.lido-schema.org/lido00099">
                    <xsl:call-template name="aat-id"/>
                </lido:conceptID>
            </xsl:for-each>
            <xsl:for-each select="./gesah:TGN_ID">
                <lido:conceptID lido:type="http://terminology.lido-schema.org/lido00099">
                    <xsl:call-template name="tgn-id"/>
                </lido:conceptID>
            </xsl:for-each>
            <xsl:for-each select="./gesah:ULAN_ID">
                <lido:conceptID lido:type="http://terminology.lido-schema.org/lido00099">
                    <xsl:call-template name="ulan-id"/>
                </lido:conceptID>
            </xsl:for-each>
            <xsl:for-each select="./gesah:GND_ID">
                <lido:conceptID lido:type="http://terminology.lido-schema.org/lido00099">
                    <xsl:call-template name="gnd-id"/>
                </lido:conceptID>
            </xsl:for-each>
            <xsl:for-each select="./gesah:Iconclass_ID">
                <lido:conceptID lido:type="http://terminology.lido-schema.org/lido00099">
                    <xsl:call-template name="iconclass-id"/>
                </lido:conceptID>
            </xsl:for-each>
            <xsl:for-each select="./gesah:Wikidata_ID">
                <lido:conceptID lido:type="http://terminology.lido-schema.org/lido00099">
                    <xsl:call-template name="wikidata-id"/>
                </lido:conceptID>
            </xsl:for-each>
            <xsl:for-each select="./rdfs:label">
                <lido:term>
                    <xsl:if test="@xml:lang">
                        <xsl:attribute name="xml:lang">
                            <xsl:value-of select="@xml:lang" />
                        </xsl:attribute>
                    </xsl:if>
                    <xsl:value-of select="text()" />
                </lido:term>
            </xsl:for-each>
        </xsl:template>

        <xsl:template name="gnd-id">
            <xsl:value-of select="concat('https://d-nb.info/gnd/', text())" />
        </xsl:template>

        <xsl:template name="tgn-id">
            <xsl:value-of select="concat('http://vocab.getty.edu/tgn/', text())" />
        </xsl:template>

        <xsl:template name="aat-id">
            <xsl:value-of select="concat('http://vocab.getty.edu/aat/', text())" />
        </xsl:template>

        <xsl:template name="wikidata-id">
            <xsl:value-of select="concat('http://www.wikidata.org/wiki/', text())" />
        </xsl:template>

        <xsl:template name="ulan-id">
            <xsl:value-of select="concat('http://vocab.getty.edu/page/ulan/', text())" />
        </xsl:template>

        <xsl:template name="iconclass-id">
            <xsl:value-of select="concat('https://iconclass.org/', text())" />
        </xsl:template>

        <xsl:template name="geonames-id">
            <xsl:value-of select="concat('https://www.geonames.org/', text())" />
        </xsl:template>

        <xsl:template name="cona-id">
            <xsl:value-of select="concat('http://vocab.getty.edu/page/cona/', text())" />
        </xsl:template>

        <xsl:template name="isil-id">
            <xsl:value-of select="concat('ld.zdb-services.de/resource/organisations/', text())" />
        </xsl:template>

        <xsl:template name="event-date">
            <xsl:if test="./gesah:literal_date_appellation or ./vivo:dateTimeInterval">
                <lido:eventDate>
                    <xsl:choose>
                        <xsl:when test="./gesah:literal_date_appellation">
                            <lido:displayDate>
                                <xsl:value-of select="./gesah:literal_date_appellation/text()" />
                            </lido:displayDate>
                        </xsl:when>
                        <xsl:when test="local:get(local:get(./vivo:dateTimeInterval)/vivo:end)/vivo:dateTime/text() = local:get(local:get(./vivo:dateTimeInterval)/vivo:start)/vivo:dateTime/text() and 
                                        local:get(local:get(./vivo:dateTimeInterval)/vivo:start)/vivo:dateTimePrecision/@rdf:resource" >
                            <lido:displayDate>
                                <xsl:choose>
                                    <xsl:when test="local:get(local:get(vivo:dateTimeInterval)//vivo:start)//vivo:dateTimePrecision/@rdf:resource = 'http://vivoweb.org/ontology/core#yearPrecision'">
                                        <xsl:value-of select="substring(local:get(local:get(vivo:dateTimeInterval)//vivo:start)//vivo:dateTime/text(), 1, 4)" />
                                    </xsl:when>
                                    <xsl:when test="local:get(local:get(vivo:dateTimeInterval)//vivo:start)//vivo:dateTimePrecision/@rdf:resource = 'http://vivoweb.org/ontology/core#yearMonthPrecision'">
                                        <xsl:value-of select="substring(local:get(local:get(vivo:dateTimeInterval)//vivo:start)//vivo:dateTime/text(), 1, 7)" />
                                    </xsl:when>
                                    <xsl:when test="local:get(local:get(vivo:dateTimeInterval)//vivo:start)//vivo:dateTimePrecision/@rdf:resource = 'http://vivoweb.org/ontology/core#yearMonthDayPrecision'">
                                        <xsl:value-of select="substring(local:get(local:get(vivo:dateTimeInterval)//vivo:start)//vivo:dateTime/text(), 1, 10)" />
                                    </xsl:when>
                                </xsl:choose>
                            </lido:displayDate>
                        </xsl:when>
                    </xsl:choose>

                    <xsl:if test="(local:get(local:get(vivo:dateTimeInterval)//vivo:start)//vivo:dateTime/text() and 
                    local:get(local:get(vivo:dateTimeInterval)//vivo:start)//vivo:dateTimePrecision/@rdf:resource) or (
                    local:get(local:get(vivo:dateTimeInterval)//vivo:end)//vivo:dateTime/text() and 
                    local:get(local:get(vivo:dateTimeInterval)//vivo:end)//vivo:dateTimePrecision/@rdf:resource)">
                        <lido:date>
                            <xsl:if test="local:get(local:get(vivo:dateTimeInterval)//vivo:start)//vivo:dateTime/text() and 
                            local:get(local:get(vivo:dateTimeInterval)//vivo:start)//vivo:dateTimePrecision/@rdf:resource">
                                <lido:earliestDate>
                                    <xsl:choose>
                                        <xsl:when test="local:get(local:get(vivo:dateTimeInterval)//vivo:start)//vivo:dateTimePrecision/@rdf:resource = 'http://vivoweb.org/ontology/core#yearPrecision'">
                                            <xsl:value-of select="substring(local:get(local:get(vivo:dateTimeInterval)//vivo:start)//vivo:dateTime/text(), 1, 4)" />
                                        </xsl:when>
                                        <xsl:when test="local:get(local:get(vivo:dateTimeInterval)//vivo:start)//vivo:dateTimePrecision/@rdf:resource = 'http://vivoweb.org/ontology/core#yearMonthPrecision'">
                                            <xsl:value-of select="substring(local:get(local:get(vivo:dateTimeInterval)//vivo:start)//vivo:dateTime/text(), 1, 7)" />
                                        </xsl:when>
                                        <xsl:when test="local:get(local:get(vivo:dateTimeInterval)//vivo:start)//vivo:dateTimePrecision/@rdf:resource = 'http://vivoweb.org/ontology/core#yearMonthDayPrecision'">
                                            <xsl:value-of select="substring(local:get(local:get(vivo:dateTimeInterval)//vivo:start)//vivo:dateTime/text(), 1, 10)" />
                                        </xsl:when>
                                    </xsl:choose>
                                </lido:earliestDate>
                            </xsl:if>
                            <xsl:if test="local:get(local:get(vivo:dateTimeInterval)//vivo:end)//vivo:dateTime/text() and 
                            local:get(local:get(vivo:dateTimeInterval)//vivo:end)//vivo:dateTimePrecision/@rdf:resource">
                                <lido:latestDate>
                                    <xsl:choose>
                                        <xsl:when test="local:get(local:get(vivo:dateTimeInterval)//vivo:start)//vivo:dateTimePrecision/@rdf:resource = 'http://vivoweb.org/ontology/core#yearPrecision'">
                                            <xsl:value-of select="substring(local:get(local:get(vivo:dateTimeInterval)//vivo:end)//vivo:dateTime/text(), 1, 4)" />
                                        </xsl:when>
                                        <xsl:when test="local:get(local:get(vivo:dateTimeInterval)//vivo:start)//vivo:dateTimePrecision/@rdf:resource = 'http://vivoweb.org/ontology/core#yearMonthPrecision'">
                                            <xsl:value-of select="substring(local:get(local:get(vivo:dateTimeInterval)//vivo:end)//vivo:dateTime/text(), 1, 7)" />
                                        </xsl:when>
                                        <xsl:when test="local:get(local:get(vivo:dateTimeInterval)//vivo:start)//vivo:dateTimePrecision/@rdf:resource = 'http://vivoweb.org/ontology/core#yearMonthDayPrecision'">
                                            <xsl:value-of select="substring(local:get(local:get(vivo:dateTimeInterval)//vivo:end)//vivo:dateTime/text(), 1, 10)" />
                                        </xsl:when>
                                    </xsl:choose>
                                </lido:latestDate>
                            </xsl:if>
                        </lido:date>
                    </xsl:if>
                </lido:eventDate>
            </xsl:if>
        </xsl:template>
        
        <xsl:template name="activity-participant">
            <xsl:param name="activity_individual" />
            <xsl:variable name="participant_type">
                <xsl:choose>
                    <xsl:when test="./rdf-xml-export:string_type/text() = 'person'">
                        <xsl:value-of select="'http://terminology.lido-schema.org/lido00163'" />
                    </xsl:when>
                    <xsl:when test="./rdf-xml-export:string_type/text() = 'organization'">
                        <xsl:value-of select="'http://terminology.lido-schema.org/lido00413'" />
                    </xsl:when>
                </xsl:choose>
            </xsl:variable>
            <lido:eventActor>
                <xsl:for-each select="./rdfs:label">
                    <lido:displayActorInRole>
                        <xsl:variable name="text_value" select="text()" />
                        <xsl:if test="$text_value != ''">
                            <xsl:variable name="lang" select="@xml:lang" />
                            <xsl:if test="$lang != ''">
                                <xsl:attribute name="xml:lang">
                                   <xsl:value-of select="$lang" />
                                </xsl:attribute>
                            </xsl:if>
                            <xsl:value-of select="text()" />
                            <xsl:choose>
                                <xsl:when test="local:get(local:get(../gesah:has_role)[local:get(gesah:realized_in) = $activity_individual]/gesah:has_role_type)/rdfs:label[@xml:lang = $lang]">
                                    <xsl:value-of select="concat(', ', (local:get(local:get(../gesah:has_role)[local:get(gesah:realized_in) = $activity_individual]/gesah:has_role_type)/rdfs:label[@xml:lang = $lang])[1]/text() )" />
                                </xsl:when>
                                <xsl:when test="local:get(local:get(../gesah:has_role)[local:get(gesah:realized_in) = $activity_individual]/gesah:has_role_type)/rdfs:label">
                                    <xsl:value-of select="concat(', ', (local:get(local:get(../gesah:has_role)[local:get(gesah:realized_in) = $activity_individual]/gesah:has_role_type)/rdfs:label)[1]/text() )" />
                                </xsl:when>
                            </xsl:choose>
                        </xsl:if>
                    </lido:displayActorInRole>
                </xsl:for-each>
                <lido:actorInRole>
                    <!-- This is dynamic, this can be class person http://terminology.lido-schema.org/lido00163 or organization http://terminology.lido-schema.org/lido00413 -->
                    <lido:actor>
                        <xsl:attribute name="lido:type">
                            <xsl:value-of select="$participant_type" />
                        </xsl:attribute>
    
                        <!--This is dynamic, the GND or ULAN ID stored in GESAH with the individual person/organisation-->
                        <xsl:for-each select="./gesah:GND_ID">
                            <lido:actorID lido:type="http://terminology.lido-schema.org/lido00099">
                                <xsl:call-template name="gnd-id"/>
                            </lido:actorID>
                        </xsl:for-each>
                        <xsl:for-each select="./gesah:ULAN_ID">
                            <lido:actorID lido:type="http://terminology.lido-schema.org/lido00099">
                                <xsl:call-template name="ulan-id"/>
                            </lido:actorID>
                        </xsl:for-each>
                        <lido:nameActorSet>
                            <xsl:for-each select="./rdfs:label">
                                <lido:appellationValue lido:pref="http://terminology.lido-schema.org/lido00169">
                                    <xsl:if test="@xml:lang">
                                        <xsl:attribute name="xml:lang">
                                            <xsl:value-of select="@xml:lang" />
                                        </xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="text()" />
                                </lido:appellationValue>
                            </xsl:for-each>
                        </lido:nameActorSet>
                    </lido:actor>
    
                    <!--This is dynamic and equivalent to our gesah:role_types, linked to context node role which is connected with the creation activity, there are 21 role types in GESAH mostly with AAT-ID-->
                    <lido:roleActor>
                        <xsl:for-each select="local:get(./gesah:has_role)[local:get(gesah:realized_in) = $activity_individual ]">
                            <xsl:for-each select="local:get(./gesah:has_role_type)/gesah:AAT_ID">
                                <lido:conceptID lido:type="http://terminology.lido-schema.org/lido00099">
                                    <xsl:call-template name="aat-id"/>
                                </lido:conceptID>
                            </xsl:for-each>
                            <xsl:for-each select="local:get(./gesah:has_role_type)/rdfs:label">
                                <lido:term>
                                    <xsl:if test="@xml:lang">
                                        <xsl:attribute name="xml:lang">
                                            <xsl:value-of select="@xml:lang" />
                                        </xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="text()" />
                                </lido:term>
                            </xsl:for-each>
                        </xsl:for-each>
                    </lido:roleActor>
    
                    <!-- this is the gesah:has_type_of_attribution, object property to gesah:creation, in some cases we have AAT IDs for this attribution types, how can we model that? Example: "attributed to", in LIDO attributionQualifier
                    <lido:term>attributed to</lido:term>-->
                    <xsl:for-each select="local:get($activity_individual/gesah:has_type_of_attribution)">
                        <lido:attributionQualifierActor>
                            <xsl:for-each select="./gesah:AAT_ID">
                                <lido:conceptID lido:type="http://terminology.lido-schema.org/lido00099">
                                    <xsl:call-template name="aat-id"/>
                                </lido:conceptID>
                            </xsl:for-each>
                            <xsl:for-each select="./rdfs:label">
                                <lido:sourceAppellation>
                                    <xsl:if test="@xml:lang">
                                        <xsl:attribute name="xml:lang">
                                            <xsl:value-of select="@xml:lang" />
                                        </xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="text()" />
                                </lido:sourceAppellation>
                            </xsl:for-each>
                        </lido:attributionQualifierActor>
                    </xsl:for-each>
    
                </lido:actorInRole>
            </lido:eventActor>
        </xsl:template>

        <xsl:template name="event-places">
            <xsl:for-each select="local:get(./gesah:has_place)">
                <xsl:call-template name="event-place"/>
            </xsl:for-each>
        </xsl:template>
        
        <xsl:template name="activity-participants">
            <xsl:param name = "activity_individual" />
            <xsl:for-each select="local:get(./gesah:has_participant)">
				<xsl:call-template name="activity-participant">
					<xsl:with-param name="activity_individual" select = "$activity_individual" />
				</xsl:call-template>
            </xsl:for-each>
        </xsl:template>

        <xsl:template name="relationship-event-related-work-set">
        	<lido:relatedWorkSet>
	            <lido:relatedWork>
	                <lido:object>
		            	<xsl:for-each select="local:get(current())">
		                    <xsl:call-template name="relationship-event"/>
		                </xsl:for-each>
	                </lido:object>
	            </lido:relatedWork>
	            <lido:relatedWorkRelType>
	                <xsl:call-template name="relationship-related-type"/>
	            </lido:relatedWorkRelType>
	        </lido:relatedWorkSet>
        </xsl:template>

        <xsl:template name="relationship-event">
            <lido:objectID lido:type="http://terminology.lido-schema.org/lido00099">
                <xsl:value-of select="@rdf:about" />
            </lido:objectID>
            <xsl:for-each select="./rdfs:label">
                <lido:objectNote>
                    <xsl:if test="@xml:lang">
                        <xsl:attribute name="xml:lang">
                            <xsl:value-of select="@xml:lang" />
                        </xsl:attribute>
                    </xsl:if>
                    <xsl:value-of select="text()" />
                </lido:objectNote>
            </xsl:for-each>
        </xsl:template>
        
        <xsl:template name="relationship-related-type">
            <xsl:variable name="resource_uri" select="concat( namespace-uri(), local-name() )" />
            <xsl:for-each select="fn:root(current())//*[@rdf:about = $resource_uri]">
                <xsl:for-each select="./rdfs:seeAlso">
                    <lido:conceptID lido:type="http://terminology.lido-schema.org/lido00099">
                        <xsl:value-of select="text()" />
                    </lido:conceptID>
                </xsl:for-each>
                <xsl:for-each select="./rdfs:label">
                    <lido:term>
                        <xsl:if test="@xml:lang">
                            <xsl:attribute name="xml:lang">
                                <xsl:value-of select="@xml:lang" />
                            </xsl:attribute>
                        </xsl:if>
                        <xsl:value-of select="text()" />
                    </lido:term>
                </xsl:for-each>
            </xsl:for-each>
        </xsl:template>
        
        <xsl:function name="local:individual-first-de-or-other-label">
		    <xsl:param name="cur_element"/>
		    <xsl:param name="local_prefix"/>
		    <xsl:param name="local_suffix"/>
	         <xsl:choose>
 	            <xsl:when test="$cur_element/rdfs:label">
 	                <xsl:choose>
 	            		<xsl:when test="$cur_element/rdfs:label[@xml:lang = 'de-DE']">
	                		<xsl:value-of select="concat( $local_prefix, normalize-space(($cur_element/rdfs:label[@xml:lang = 'de-DE'])[1]/text()), $local_suffix )" />
 	                    </xsl:when>
 	            		<xsl:when test="$cur_element/rdfs:label[@xml:lang = 'de']">
	                		<xsl:value-of select="concat( $local_prefix, normalize-space(($cur_element/rdfs:label[@xml:lang = 'de'])[1]/text()), $local_suffix )" />
 	                    </xsl:when>
 	            		<xsl:when test="$cur_element/rdfs:label">
	                		<xsl:value-of select="concat( $local_prefix, normalize-space(($cur_element/rdfs:label)[1]/text()), $local_suffix )" />
 	                    </xsl:when>
 	                </xsl:choose>
	            </xsl:when>
	        </xsl:choose>
		</xsl:function>

		<xsl:function name="local:role-first-de-or-other-label">
		    <xsl:param name="cur_element"/>
		    <xsl:param name="local_prefix"/>
		    <xsl:param name="local_suffix"/>
	         <xsl:choose>
 	            <xsl:when test="$cur_element/rdfs:label">
 	                <xsl:choose>
 	            		<xsl:when test="$cur_element/rdfs:label[@xml:lang = 'de-DE']">
	                		<xsl:value-of select="concat( $local_prefix, ($cur_element/rdfs:label[@xml:lang = 'de-DE'])[1]/text(), $local_suffix )" />
 	                    </xsl:when>
 	            		<xsl:when test="$cur_element/rdfs:label[@xml:lang = 'de']">
	                		<xsl:value-of select="concat( $local_prefix, ($cur_element/rdfs:label[@xml:lang = 'de'])[1]/text(), $local_suffix )" />
 	                    </xsl:when>
 	            		<xsl:when test="$cur_element/rdfs:label">
	                		<xsl:value-of select="concat( $local_prefix, ($cur_element/rdfs:label)[1]/text(), $local_suffix )" />
 	                    </xsl:when>
 	                </xsl:choose>
	            </xsl:when>

	        </xsl:choose>
		</xsl:function>

		<xsl:function name="local:is-initialization-of-object" as="xs:boolean">
		    <xsl:param name="cur_element"/>
		    <xsl:param name="type"/>
    		<xsl:value-of select="
					              (
					               (
					                $type = 'print'
					                 or 
					                $type = 'printed-materials'
					                 or 
					                $type = 'photomechanical-print'
					                 or 
					                $type = 'seal'
					               ) 
					                 and 
					                name($cur_element) = 'gesah:output_of_production' 
					              )
					                or 
					               $type = 'drawing'
					                or 
					               $type = 'manuscript'
					                or 
					               $type = 'book-illumination'
					                or 
					               $type = 'musical-notation'
	        " />
		</xsl:function>
		 
        <xsl:template name="event-place">
            <lido:eventPlace>
                <lido:place>
                    <!-- BR: our graphic_location should have TGN ID and/or Geonames ID,  maybe we can export both if available-->
                    <xsl:for-each select="./gesah:TGN_ID">
                        <lido:placeID lido:type="http://terminology.lido-schema.org/lido00099">
                            <xsl:call-template name="tgn-id"/>
                        </lido:placeID>
                    </xsl:for-each>
                    <xsl:for-each select="./gesah:GeoNames_ID">
                        <lido:placeID lido:type="http://terminology.lido-schema.org/lido00099">
                            <xsl:call-template name="geonames-id"/>
                        </lido:placeID>
                    </xsl:for-each>

                    <lido:namePlaceSet>
                        <xsl:for-each select="./rdfs:label">
                            <lido:appellationValue lido:pref="http://terminology.lido-schema.org/lido00169">
                                <xsl:if test="@xml:lang">
                                    <xsl:attribute name="xml:lang">
                                        <xsl:value-of select="@xml:lang" />
                                    </xsl:attribute>
                                </xsl:if>
                                <xsl:value-of select="text()" />
                            </lido:appellationValue>
                        </xsl:for-each>
                    </lido:namePlaceSet>
                </lido:place>
            </lido:eventPlace>
        </xsl:template>

		<xsl:template name="lido-culture">
            <xsl:param name = "cultural_object" />
			<xsl:for-each select="local:get($cultural_object/gesah:has_geographic_assignment)">
	            <lido:culture>
	                <xsl:for-each select="./gesah:AAT_ID">
	                    <lido:conceptID lido:type="http://terminology.lido-schema.org/lido00099">
	                        <xsl:call-template name="aat-id"/>
	                    </lido:conceptID>
	                </xsl:for-each>
	                <xsl:for-each select="./rdfs:label">
	                    <lido:term>
	                        <xsl:if test="@xml:lang">
	                            <xsl:attribute name="xml:lang">
	                                <xsl:value-of select="@xml:lang" />
	                            </xsl:attribute>
	                        </xsl:if>
	                        <xsl:value-of select="text()" />
	                    </lido:term>
	                </xsl:for-each>
	            </lido:culture>
	        </xsl:for-each>
		</xsl:template>
		
		<xsl:template name="lido-period-name">
            <xsl:param name = "cultural_object" />
			<xsl:for-each select="local:get($cultural_object/gesah:has_stylistic_assignment)">
			    <lido:periodName>
			        <xsl:for-each select="./gesah:AAT_ID">
			            <lido:conceptID lido:type="http://terminology.lido-schema.org/lido00099">
			                <xsl:call-template name="aat-id"/>
			            </lido:conceptID>
			        </xsl:for-each>
			        <xsl:for-each select="./rdfs:label">
			            <lido:term>
			                <xsl:if test="@xml:lang">
			                    <xsl:attribute name="xml:lang">
			                        <xsl:value-of select="@xml:lang" />
			                    </xsl:attribute>
			                </xsl:if>
			                <xsl:value-of select="text()" />
			            </lido:term>
			        </xsl:for-each>
			    </lido:periodName>
			</xsl:for-each>
		</xsl:template>

        <xsl:template name="creation-production-edition">
            <xsl:param name = "cultural_object" />
            <xsl:param name = "type" />
            <xsl:param name = "is-culture-and-period-output" />
            <xsl:variable name="activity_property_name" select="name(current())" />
        	<xsl:for-each select="local:get(current())">
        	    <xsl:variable name="activity_individual" select="current()" />
                <lido:eventSet>
                    <lido:event>
                        <lido:eventType>
                           <!-- BR: eventType designing (lido00224) is correct only for gesah:creation when connected with prints, printed material and photmechanical prints.
                            First check the class of CO, if CO is class:print,class:photomechanical_print, class:seal or class:printed_material use following pattern with three eventSets -->
                            <xsl:choose>
                                <xsl:when test="$type = 'print' or $type = 'printed-materials' or $type = 'photomechanical-print' or $type = 'seal'">
                                    <xsl:if test="$activity_property_name = 'gesah:output_of_creation'">
                                        <lido:conceptID lido:type="http://terminology.lido-schema.org/lido00099">http://terminology.lido-schema.org/lido00224</lido:conceptID>
                                        <lido:term xml:lang="de">Entwurf (Aktivität)</lido:term>
                                        <lido:term xml:lang="en">Designing</lido:term>
                                    </xsl:if>
                                    <xsl:if test="$activity_property_name = 'gesah:output_of_production'">
                                        <lido:conceptID lido:type="http://terminology.lido-schema.org/lido00099">http://terminology.lido-schema.org/lido01089</lido:conceptID>
                                        <lido:term xml:lang="de">Herstellung der Druckform</lido:term>
                                        <lido:term xml:lang="en">Production of the printing surface</lido:term>
                                    </xsl:if>
                                    <xsl:if test="$activity_property_name = 'gesah:object_of_edition'">
                                        <lido:conceptID lido:type="http://terminology.lido-schema.org/lido00099">http://terminology.lido-schema.org/lido00228</lido:conceptID>
                                        <lido:term xml:lang="de">Veröffentlichung (Ereignis)</lido:term>
                                        <lido:term xml:lang="en">Publishing</lido:term>
                                    </xsl:if>
                                </xsl:when>
                                <xsl:when test="$type = 'drawing' or $type = 'manuscript' or $type = 'book-illumination' or $type = 'musical-notation'">
                                    <xsl:if test="$activity_property_name = 'gesah:output_of_creation'">
                                        <lido:conceptID lido:type="http://terminology.lido-schema.org/lido00099">http://terminology.lido-schema.org/lido00007</lido:conceptID>
                                        <lido:term xml:lang="de">Herstellung</lido:term>
                                        <lido:term xml:lang="en">Production</lido:term>
                                    </xsl:if>
                                </xsl:when>
                            </xsl:choose>
                        </lido:eventType>

						<xsl:call-template name="activity-participants">
							<xsl:with-param name="activity_individual" select="$activity_individual" />
						</xsl:call-template>

                        <xsl:if test="$is-culture-and-period-output">
                        	<xsl:call-template name="lido-culture">
								<xsl:with-param name="cultural_object" select="$cultural_object" />
							</xsl:call-template>
                        </xsl:if>


                        <!-- BR: this is dynamic and equivalent to our data property literal_date or in case of empty text field diplay the time span of earliest date and latest date or if both are the same display it only once (as below in the example) -->
                        <xsl:call-template name="event-date"/>

                        <xsl:if test="$is-culture-and-period-output">
                               <xsl:call-template name="lido-period-name">
							       <xsl:with-param name="cultural_object" select="$cultural_object" />
							   </xsl:call-template>
                        </xsl:if>

                        <!-- BR: This is equivalent to gesah:has_place with vivo:geographic_location-->
                        <xsl:call-template name="event-places"/>

                        <xsl:if test="./gesah:has_material or ./gesah:uses_technique">
                            <lido:eventMaterialsTech>

                                <xsl:for-each select="local:get(./gesah:has_material)/rdfs:label">
                                    <xsl:variable name="lang" select="@xml:lang" />
                                    <lido:displayMaterialsTech>
                                        <xsl:attribute name="xml:lang">
                                            <xsl:value-of select="$lang" />
                                        </xsl:attribute>
                                        <xsl:choose>
                                            <xsl:when test="$lang = 'de-DE'">
                                                <xsl:value-of select="concat(string-join(local:get($activity_individual/gesah:uses_technique)/rdfs:label[@xml:lang=$lang], ', '), ' auf ', text())" />
                                            </xsl:when>
                                            <xsl:when test="$lang = 'en-US'">
                                                <xsl:value-of select="concat(string-join(local:get($activity_individual/gesah:uses_technique)/rdfs:label[@xml:lang=$lang], ', '), ' on ', text())" />
                                            </xsl:when>
                                            <xsl:otherwise>
                                               </xsl:otherwise>
                                        </xsl:choose>
                                    </lido:displayMaterialsTech>
                                </xsl:for-each>

                                <lido:materialsTech>
                                    <xsl:for-each select="local:get(./gesah:has_material)">
                                        <lido:termMaterialsTech lido:type="http://terminology.lido-schema.org/lido00514">
                                            <xsl:for-each select="./gesah:AAT_ID">
                                                <lido:conceptID lido:type="http://terminology.lido-schema.org/lido00099">
                                                    <xsl:call-template name="aat-id"/>
                                                </lido:conceptID>
                                            </xsl:for-each>
                                            <xsl:for-each select="./rdfs:label">
                                                <lido:term>
                                                    <xsl:if test="@xml:lang">
                                                        <xsl:attribute name="xml:lang">
                                                            <xsl:value-of select="@xml:lang" />
                                                        </xsl:attribute>
                                                    </xsl:if>
                                                    <xsl:value-of select="text()" />
                                                </lido:term>
                                            </xsl:for-each>
                                        </lido:termMaterialsTech>
                                    </xsl:for-each>

                                    <xsl:for-each select="local:get(./gesah:uses_technique)">
                                        <lido:termMaterialsTech lido:type="http://terminology.lido-schema.org/lido00131">
                                            <xsl:for-each select="./gesah:AAT_ID">
                                                <lido:conceptID lido:type="http://terminology.lido-schema.org/lido00099">
                                                    <xsl:call-template name="aat-id"/>
                                                </lido:conceptID>
                                            </xsl:for-each>
                                            <xsl:for-each select="./rdfs:label">
                                                <lido:term>
                                                    <xsl:if test="@xml:lang">
                                                        <xsl:attribute name="xml:lang">
                                                            <xsl:value-of select="@xml:lang" />
                                                        </xsl:attribute>
                                                    </xsl:if>
                                                    <xsl:value-of select="text()" />
                                                </lido:term>
                                            </xsl:for-each>
                                        </lido:termMaterialsTech>
                                    </xsl:for-each>

                                </lido:materialsTech>

                            </lido:eventMaterialsTech>
                        </xsl:if>
                    </lido:event>
                </lido:eventSet>
            </xsl:for-each>
        </xsl:template>

        <xsl:template name="object-of-preservation-individual">
            <lido:eventSet>
                <lido:event>
                    <!-- This is dynamic in GESAH: subclasses of preservation/collection care are "preventive conservation", "conservation" and "restoration", if an activity is of classes "preventive conservation" or "conservation" it is type http://terminology.lido-schema.org/lido00402, if an activity is of class "restoration" it is type http://terminology.lido-schema.org/lido00034-->
                    <lido:eventType>
                         <xsl:variable name="object_of_preservation_type" select="rdf-xml-export:string_type/text()" />
                         <xsl:choose>
                            <xsl:when test="$object_of_preservation_type = 'conservation' or $object_of_preservation_type = 'preventive conservation'">
                                <lido:conceptID lido:type="http://terminology.lido-schema.org/lido00099">http://terminology.lido-schema.org/lido00402</lido:conceptID>
                                <lido:term xml:lang="en">Conservation</lido:term>
                                <lido:term xml:lang="de">Konservierung</lido:term>
                            </xsl:when>
                            <xsl:when test="$object_of_preservation_type = 'restoration'">
                                <lido:conceptID lido:type="http://terminology.lido-schema.org/lido00099">http://terminology.lido-schema.org/lido00034</lido:conceptID>
                                <lido:term xml:lang="en">Restoration</lido:term>
                                <lido:term xml:lang="de">Restaurierung</lido:term>
                            </xsl:when>
                         </xsl:choose>
                    </lido:eventType>
					<xsl:call-template name="activity-participants">
						<xsl:with-param name="activity_individual" select = "current()" />
					</xsl:call-template>
                    <xsl:call-template name="event-date"/>
                    <xsl:call-template name="event-places"/>
                    <!-- This is object property gesah:has_measure_specifics-->
                    <xsl:for-each select="local:get(./gesah:has_measure_specifics)">
                    	<xsl:call-template name="has-measure-specifics-individual"/>
                    </xsl:for-each>
                </lido:event>
            </lido:eventSet>
        </xsl:template>
        
        <xsl:template name="object-of-provenance-individual">
        	<lido:eventSet>
                <lido:event>
                    <lido:eventType>
                        <lido:conceptID lido:type="http://terminology.lido-schema.org/lido00099">http://terminology.lido-schema.org/lido00227</lido:conceptID>
                        <lido:term xml:lang="de">Provenienzereignis</lido:term>
                        <lido:term xml:lang="en">Provenance event</lido:term>
                    </lido:eventType>
					<xsl:call-template name="activity-participants">
						<xsl:with-param name="activity_individual" select = "current()" />
					</xsl:call-template>
                    <xsl:call-template name="event-date"/>
                    <xsl:call-template name="event-places"/>
					<lido:eventDescriptionSet>
						<lido:descriptiveNoteValue> 
						    <!-- here we map participant label, roletype label , place label, literal date and comment in the following pattern -->
                            <xsl:value-of select="local:individual-first-de-or-other-label(local:get(./gesah:has_participant)[1], '', '')" />
                            <xsl:value-of select="local:role-first-de-or-other-label( local:get(local:get(local:get(./gesah:has_participant)[1]/gesah:has_role)[1]/gesah:has_role_type)[1] , ' (', ')')" />
                            <xsl:value-of select="local:individual-first-de-or-other-label(local:get(./gesah:has_place)[1], ', ', '')" />
                            <xsl:if test="./gesah:literal_date_appellation">
                                <xsl:value-of select="concat( ', ', ./gesah:literal_date_appellation/text())" />
	                        </xsl:if>
                            <xsl:if test="./gesah:comment">
                                <xsl:value-of select="concat( ', [', ./gesah:comment/text(), ']')" />
	                        </xsl:if>
						</lido:descriptiveNoteValue>
					</lido:eventDescriptionSet>                                        
                </lido:event>
            </lido:eventSet>
        </xsl:template>
        
        <xsl:template name="has-organizer-individual">
            <lido:eventActor>
                <xsl:for-each select="./rdfs:label">
                    <lido:displayActorInRole>
                        <xsl:if test="@xml:lang">
                            <xsl:attribute name="xml:lang">
                                <xsl:value-of select="@xml:lang" />
                            </xsl:attribute>
                        </xsl:if>
                        <xsl:value-of select="text()" />
                    </lido:displayActorInRole>
                </xsl:for-each>
                <lido:actorInRole>
                    <lido:actor lido:type="http://terminology.lido-schema.org/lido00413">
                        <xsl:for-each select="./gesah:ISIL_ID">
                            <actorID lido:type="http://terminology.lido-schema.org/lido00099">
                                <xsl:call-template name="isil-id"/>
                            </actorID>
                        </xsl:for-each>
                        <xsl:for-each select="./gesah:GND_ID">
                            <actorID lido:type="http://terminology.lido-schema.org/lido00099">
                                <xsl:call-template name="gnd-id"/>
                            </actorID>
                        </xsl:for-each>
                        <xsl:for-each select="./gesah:Wikidata_ID">
                            <actorID lido:type="http://terminology.lido-schema.org/lido00099">
                                <xsl:call-template name="wikidata-id"/>
                            </actorID>
                        </xsl:for-each>
                        <lido:nameActorSet>
                            <xsl:for-each select="./rdfs:label">
                                <lido:appellationValue>
                                    <xsl:if test="@xml:lang">
                                        <xsl:attribute name="xml:lang">
                                            <xsl:value-of select="@xml:lang" />
                                        </xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="text()" />
                                </lido:appellationValue>
                            </xsl:for-each>
                        </lido:nameActorSet>
                    </lido:actor>
                </lido:actorInRole>
            </lido:eventActor>
        </xsl:template>

        <xsl:function name="local:get" as="node()*" >
        	<xsl:param name="cur_elements" as="node()*" />
        	<xsl:for-each select="$cur_elements[self::*]">
                <xsl:choose>
					<xsl:when test="./@rdf:resource">
	                    <xsl:variable name="resource_uri" select="./@rdf:resource" /> 
	                    <xsl:sequence select="fn:root(current())//*[@rdf:about = $resource_uri]"/>            
	                </xsl:when>
		            <xsl:otherwise>
	                	<xsl:sequence select="./*"/>
		            </xsl:otherwise>
		        </xsl:choose>
            </xsl:for-each>
		</xsl:function>

        <xsl:function name="local:id">
        	<xsl:param name="cur_elements" as="node()*" />
        	<xsl:for-each select="$cur_elements[self::*]">
                <xsl:choose>
					<xsl:when test="./@rdf:resource">
	                    <xsl:sequence select="./@rdf:resource"/>            
	                </xsl:when>
		            <xsl:otherwise>
	                	<xsl:sequence select="./*/@rdf:about"/>
		            </xsl:otherwise>
		        </xsl:choose>
            </xsl:for-each>
		</xsl:function>
        
        <xsl:template name="object-of-event-individual">
            <lido:eventSet>
                <lido:event>
                    <lido:eventType>
                        <!--BR: this lido type remains always the same-->
                        <lido:conceptID lido:type="http://terminology.lido-schema.org/lido00099">http://terminology.lido-schema.org/lido00225</lido:conceptID>
                        <lido:term xml:lang="de">Ausstellung (Aktivität)</lido:term>
                        <lido:term xml:lang="en">Exhibition (Activity)</lido:term>
                    </lido:eventType>
                    <xsl:if test="./rdfs:label">
                        <lido:eventName>
                            <!--BR: This is label of instance of class exhibition-->
                            <xsl:for-each select="./rdfs:label">
                                <lido:appellationValue lido:pref="http://terminology.lido-schema.org/lido00169">
                                    <xsl:if test="@xml:lang">
                                        <xsl:attribute name="xml:lang">
                                            <xsl:value-of select="@xml:lang" />
                                        </xsl:attribute>
                                    </xsl:if>
                                    <xsl:value-of select="text()" />
                                </lido:appellationValue>
                            </xsl:for-each>
                        </lido:eventName>
                    </xsl:if>
                    <xsl:for-each select="local:get(./gesah:has_organizer)">
                        <xsl:call-template name="has-organizer-individual"/>
                    </xsl:for-each>
                    <xsl:call-template name="event-date"/>
                    <xsl:call-template name="event-places"/>
                </lido:event>
            </lido:eventSet>
        </xsl:template>        
                
        <xsl:template name="has-measure-specifics-individual">
			<lido:eventDescriptionSet>
	            <!-- This is the label of instances of class gesah:treatment_specifics, we have it in German and English and if available with AAT-identifier - I hope that my LIDO-modelling will fit here-->
	            <!--conservation description-->
	            <xsl:for-each select="./gesah:AAT_ID">
	                <descriptiveNoteID lido:type="http://terminology.lido-schema.org/lido00099">
	                    <xsl:call-template name="aat-id"/>
	                </descriptiveNoteID>
	            </xsl:for-each>
	            <xsl:for-each select="./rdfs:label">
	                <lido:descriptiveNoteValue>
	                    <xsl:if test="@xml:lang">
	                        <xsl:attribute name="xml:lang">
	                            <xsl:value-of select="@xml:lang" />
	                        </xsl:attribute>
	                    </xsl:if>
	                    <xsl:value-of select="text()" />
	                </lido:descriptiveNoteValue>
	            </xsl:for-each>
	        </lido:eventDescriptionSet>
        </xsl:template>

		<xsl:function name="local:type">
		    <xsl:param name="cur_element"/>
		    
		    <xsl:for-each select="$cur_element/rdf-xml-export:type">
			    <xsl:variable name="resource_uri">
	                <xsl:value-of select="local:id(current())" />                
		        </xsl:variable>
	            <xsl:choose>
	                <xsl:when test="$resource_uri = 'http://ontology.tib.eu/gesah/Print'">
	                    <xsl:value-of select="'print'" />
	                </xsl:when>
	                <xsl:when test="$resource_uri = 'http://ontology.tib.eu/gesah/Drawing'">
	                    <xsl:value-of select="'drawing'" />
	                </xsl:when>
	                <xsl:when test="$resource_uri = 'http://ontology.tib.eu/gesah/Manuscript'">
	                    <xsl:value-of select="'manuscript'" />
	                </xsl:when>
	                <xsl:when test="$resource_uri = 'http://ontology.tib.eu/gesah/Seal'">
	                    <xsl:value-of select="'seal'" />
	                </xsl:when>
	                <xsl:when test="$resource_uri = 'http://ontology.tib.eu/gesah/Printed_Materials'">
	                    <xsl:value-of select="'printed-materials'" />
	                </xsl:when>
	                <xsl:when test="$resource_uri = 'http://ontology.tib.eu/gesah/Painting'">
	                    <xsl:value-of select="'book-illumination'" />
	                </xsl:when>
	                <xsl:when test="$resource_uri = 'http://ontology.tib.eu/gesah/Musical_Notation'">
	                    <xsl:value-of select="'musical-notation'" />
	                </xsl:when>
	                <xsl:when test="$resource_uri = 'http://ontology.tib.eu/gesah/Photomechanical_Print'">
	                    <xsl:value-of select="'photomechanical-print'" />
	                </xsl:when>
	            </xsl:choose>
            </xsl:for-each>
		</xsl:function>
		
        <xsl:template match="/">
            <lido:lidoWrap xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:html="http://www.w3.org/1999/xhtml"
                           xmlns:lido="http://www.lido-schema.org" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                           xsi:schemaLocation="http://www.lido-schema.org http://www.lido-schema.org/schema/v1.0/lido-v1.0.xsd">
                <xsl:for-each select="//*[rdf-xml-export:root/text() = '1']">
                    <xsl:call-template name="lido"/>
                </xsl:for-each>
            </lido:lidoWrap>
        </xsl:template>

        <xsl:template name="lido">
            <lido:lido xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.lido-schema.org"
                xmlns:owl="http://www.w3.org/2002/07/owl#"
                xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
                xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
                xmlns:vitro="http://vitro.mannlib.cornell.edu/ns/vitro/0.7#"
                xmlns:gml="http://www.opengis.net/gml"
                xmlns:doc="http://www.mda.org.uk/spectrumXML/Documentation"
                xmlns:sch="http://purl.oclc.org/dsdl/schematron"
                xmlns:skos="http://www.w3.org/2004/02/skos/core#"
                xmlns:tei="http://www.tei-c.org/ns/1.0"
                xmlns:lido="http://www.lido-schema.org"
                xmlns:xlink="http://www.w3.org/1999/xlink"
                xmlns:smil20lang="http://www.w3.org/2001/SMIL20/Language"
            >
                <xsl:variable name="uri">
                    <xsl:value-of select="@rdf:about" />
                </xsl:variable>
                
                <xsl:variable name="cultural_object" select="current()" />
                
                <lido:lidoRecID
                    lido:type="http://terminology.lido-schema.org/lido00099"
                    lido:source="ld.zdb-services.de/resource/organisations/DE-89"
                ><xsl:value-of select="concat('DE-89/sah/lido/' , tokenize($uri,'/')[last()])" /></lido:lidoRecID>

                <lido:objectPublishedID lido:pref="http://terminology.lido-schema.org/lido00169" lido:type="http://terminology.lido-schema.org/lido00099" lido:source="ld.zdb-services.de/resource/organisations/DE-89">
                    <xsl:value-of select="$uri" />
                </lido:objectPublishedID>

                <xsl:for-each select="gesah:GND_ID">
                    <lido:objectPublishedID lido:pref="http://terminology.lido-schema.org/lido00169" lido:type="http://terminology.lido-schema.org/lido00099">
                        <xsl:call-template name="gnd-id"/>
                    </lido:objectPublishedID>
                </xsl:for-each>

                <xsl:for-each select="gesah:CONA_ID">
                    <lido:objectPublishedID lido:pref="http://terminology.lido-schema.org/lido00169" lido:type="http://terminology.lido-schema.org/lido00099">
                        <xsl:call-template name="cona-id"/>
                    </lido:objectPublishedID>
                </xsl:for-each>

                <xsl:for-each select="gesah:Wikidata_ID">
                    <lido:objectPublishedID lido:pref="http://terminology.lido-schema.org/lido00169" lido:type="http://terminology.lido-schema.org/lido00099">
                        <xsl:call-template name="wikidata-id"/>
                    </lido:objectPublishedID>
                </xsl:for-each>

                <lido:category>
                    <lido:conceptID lido:type="http://terminology.lido-schema.org/lido00099">http://terminology.lido-schema.org/lido00096</lido:conceptID>
                        <lido:term xml:lang="en">Human-made object</lido:term>
                </lido:category>
                
                <xsl:variable name="type">
                    <xsl:value-of select="local:type(current())" />
                </xsl:variable>

                <lido:descriptiveMetadata xml:lang="de">
                    <lido:objectClassificationWrap>
                        <lido:objectWorkTypeWrap>
                            <lido:objectWorkType lido:type="http://terminology.lido-schema.org/lido00789">
                                <lido:conceptID lido:type="http://terminology.lido-schema.org/lido00099">
                                    <xsl:value-of select="(local:get(./vitro:mostSpecificType)/rdfs:seeAlso)[1]/text()" />
                                </lido:conceptID>
                                <xsl:for-each select="local:get(./vitro:mostSpecificType)/rdfs:label">
                                    <lido:term>
                                        <xsl:if test="@xml:lang">
                                            <xsl:attribute name="xml:lang">
                                                <xsl:value-of select="@xml:lang" />
                                            </xsl:attribute>
                                        </xsl:if>
                                        <xsl:value-of select="text()" />
                                    </lido:term>
                                </xsl:for-each>
                            </lido:objectWorkType>
                        </lido:objectWorkTypeWrap>

                        <!-- TO DELETE
                        <lido:classificationWrap>
                            <lido:classification lido:type="http://terminology.lido-schema.org/lido00853">
                                 <lido:conceptID lido:type="http://terminology.lido-schema.org/lido00099">
                                    <xsl:value-of select="(local:get(./vitro:mostSpecificType)/rdfs:seeAlso)[1]/text()" />
                                </lido:conceptID>

                                <xsl:for-each select="local:get(./vitro:mostSpecificType)/rdfs:label">
                                    <lido:term>
                                        <xsl:if test="@xml:lang">
                                            <xsl:attribute name="xml:lang">
                                                <xsl:value-of select="@xml:lang" />
                                            </xsl:attribute>
                                        </xsl:if>
                                        <xsl:value-of select="text()" />
                                    </lido:term>
                                </xsl:for-each>

                                <xsl:for-each select="local:get(./vitro:mostSpecificType)/rdfs:label">
                                    <lido:term lido:addedSearchTerm="yes">
                                        <xsl:if test="@xml:lang">
                                            <xsl:attribute name="xml:lang">
                                                <xsl:value-of select="@xml:lang" />
                                            </xsl:attribute>
                                        </xsl:if>
                                        <xsl:value-of select="text()" />
                                    </lido:term>
                                </xsl:for-each>
                            </lido:classification>
                        </lido:classificationWrap> -->
                    </lido:objectClassificationWrap>

                    <lido:objectIdentificationWrap>
                        <lido:titleWrap>
                            <lido:titleSet lido:type="http://vocab.getty.edu/page/aat/300417200">
                                <xsl:for-each select="./rdfs:label">
                                    <lido:appellationValue lido:pref="http://terminology.lido-schema.org/lido00526">
                                        <xsl:if test="@xml:lang">
                                            <xsl:attribute name="xml:lang">
                                               <xsl:value-of select="@xml:lang" />
                                            </xsl:attribute>
                                        </xsl:if>
                                        <xsl:value-of select="text()"/>
                                    </lido:appellationValue>
                                </xsl:for-each>
                            </lido:titleSet>

                            <xsl:for-each select="local:get(./gesah:has_Title)">
                                <lido:titleSet>
                                    <xsl:if test="local:get(gesah:has_title_type)/gesah:AAT_ID/text()">
                                        <xsl:attribute name="lido:type">
                                            <xsl:for-each select="local:get(gesah:has_title_type)/gesah:AAT_ID[1]">
                                                <xsl:call-template name="aat-id"/>
                                            </xsl:for-each>
                                        </xsl:attribute>
                                    </xsl:if>
                                    <lido:appellationValue lido:pref="http://terminology.lido-schema.org/lido00170">
                                        <xsl:value-of select="gesah:title/text()" />
                                    </lido:appellationValue>
                                </lido:titleSet>
                            </xsl:for-each>

                        </lido:titleWrap>
                        <xsl:if test="//gesah:object_of_inscription" >
                            <lido:inscriptionsWrap>
                                <xsl:for-each select="local:get(//gesah:object_of_inscription)[local:get(gesah:has_inscription_output)/rdf-xml-export:string_type/text() = 'http://ontology.tib.eu/gesah/Inscription_on_image']">
                                    <xsl:variable name="obj_of_inscription" select="current()" />
                                    <lido:inscriptions lido:type="Inschrift">
                                        <lido:inscriptionTranscription xml:lang="mul">
                                            <xsl:value-of select="local:get(gesah:has_inscription_output)/gesah:transcription/text()" />
                                        </lido:inscriptionTranscription>
                                        <lido:inscriptionDescription>
                                            <xsl:for-each select="distinct-values(local:get(local:get(gesah:has_inscription_output)/gesah:has_inscription_type)/rdfs:label/@xml:lang)">
                                                <xsl:variable name="lang" select="current()" />
                                                <lido:descriptiveNoteValue>
                                                    <xsl:attribute name="xml:lang">
                                                       <xsl:value-of select="$lang" />
                                                    </xsl:attribute>
                                                    <xsl:value-of select="concat('(', string-join(local:get(local:get($obj_of_inscription/gesah:has_inscription_output)/gesah:has_inscription_type)/rdfs:label[@xml:lang = $lang], ', ' ), ')' )" />
                                                    <xsl:if test="local:get($obj_of_inscription/gesah:has_inscription_output)/gesah:comment" >
                                                        <xsl:text>;</xsl:text>
                                                    </xsl:if>
                                                    <xsl:for-each select="local:get($obj_of_inscription/gesah:has_inscription_output)/gesah:comment" >
                                                        <xsl:value-of select="concat(' ', text(), '.' )" />
                                                    </xsl:for-each>
                                                </lido:descriptiveNoteValue>
                                            </xsl:for-each>
                                        </lido:inscriptionDescription>
                                    </lido:inscriptions>
                                </xsl:for-each>
                                <xsl:for-each select="local:get(//gesah:object_of_inscription)[local:get(gesah:has_inscription_output)/rdfs:comment/text() = 'http://ontology.tib.eu/gesah/Inscription_on_support']">
                                    <xsl:variable name="obj_of_inscription" select="current()" />
                                    <lido:inscriptions lido:type="Inschrift">
                                        <lido:inscriptionTranscription xml:lang="mul">
                                            <xsl:value-of select="gesah:has_inscription_output//gesah:transcription/text()" />
                                        </lido:inscriptionTranscription>
                                        <lido:inscriptionDescription>
                                            <xsl:for-each select="distinct-values(local:get(local:get(gesah:has_inscription_output)/gesah:has_inscription_type)/rdfs:label/@xml:lang)">
                                                <xsl:variable name="lang" select="current()" />
                                                <lido:descriptiveNoteValue>
                                                    <xsl:attribute name="xml:lang">
                                                       <xsl:value-of select="$lang" />
                                                    </xsl:attribute>
                                                    <xsl:value-of select="concat('(', string-join(local:get(local:get($obj_of_inscription/gesah:has_inscription_output)/gesah:has_inscription_type)/rdfs:label[@xml:lang = $lang], ', ' ), ')' )" />
                                                    <xsl:if test="local:get($obj_of_inscription/gesah:has_inscription_output)/gesah:comment" >
                                                        <xsl:text>;</xsl:text>
                                                    </xsl:if>
                                                    <xsl:for-each select="local:get($obj_of_inscription/gesah:has_inscription_output)/gesah:comment" >
                                                        <xsl:value-of select="concat(' ', text(), '.' )" />
                                                    </xsl:for-each>
                                                </lido:descriptiveNoteValue>
                                            </xsl:for-each>
                                        </lido:inscriptionDescription>
                                    </lido:inscriptions>
                                </xsl:for-each>
                                <xsl:for-each select="local:get(//gesah:has_mark_designation)">
                                    <xsl:variable name="mark-designation" select="current()" />
                                    <xsl:for-each select="local:get(./gesah:uses_mark)">
	                                    <xsl:variable name="mark" select="current()" />
	                                    <lido:inscriptions lido:type="Marke">
	                                    	<lido:inscriptionDescription>
												<!-- This is gesah:mark_URL with gesah:mark_ID, both data properties of class gesah:collector's mark-->
                                                <xsl:if test="$mark/gesah:mark_ID and $mark/gesah:mark_URL" >
													<lido:descriptiveNoteID lido:type="http://terminology.lido-schema.org/lido00099">
		                                                <xsl:attribute name="lido:source">
		                                                   <xsl:value-of select="$mark/gesah:mark_URL" />
		                                                </xsl:attribute>
														<xsl:value-of select="$mark/gesah:mark_ID" />
													</lido:descriptiveNoteID>
                                                </xsl:if>
												<!--Here we should export label of instances of colletor's mark and gesah:mark_location which is data property of conext node 
												mark_designation and gesah:comment which is data property of class gesah:collector's mark in the following pattern -->
												<lido:descriptiveNoteValue>
												<xsl:value-of select="local:individual-first-de-or-other-label($mark, '', '')"/>
												<xsl:if test="$mark-designation/gesah:mark_location" >
													<xsl:value-of select="concat(', ', $mark-designation/gesah:mark_location)"/>
												</xsl:if>
												<xsl:if test="$mark/gesah:comment" >
													<xsl:value-of select="concat(', ', $mark/gesah:comment)"/>
												</xsl:if>
												</lido:descriptiveNoteValue>
											</lido:inscriptionDescription>
	                                    </lido:inscriptions>
                                	</xsl:for-each>    
                                </xsl:for-each>
                            </lido:inscriptionsWrap>
                        </xsl:if>

                        <lido:repositoryWrap>
                            <!-- lido type is "current repository" which is equivalent to gesah:has_current_holding_institution, in our case this is always static Technische Informationsbibliothek (TIB) + "Hannover" as it is on the vitro surface, too -->
                            <lido:repositorySet lido:type="http://terminology.lido-schema.org/lido01017">
                                <!-- LIDO 1.1 <lido:displayRepository xml:lang="de">Technische Informationsbibliothek (TIB), Hannover</lido:displayRepository> -->
                                <lido:repositoryName>
                                   <lido:legalBodyID lido:type="http://terminology.lido-schema.org/lido00099">ld.zdb-services.de/resource/organisations/DE-89</lido:legalBodyID>
                                    <lido:legalBodyName>
                                        <lido:appellationValue>Technische Informationsbibliothek (TIB) / Leibniz-Informationszentrum Technik und Naturwissenschaften und Universitätsbibliothek</lido:appellationValue>
                                    </lido:legalBodyName>
                                    <lido:legalBodyWeblink lido:pref="http://terminology.lido-schema.org/lido00169">https://www.tib.eu/de/</lido:legalBodyWeblink>
                                </lido:repositoryName>
                                <!-- Inventarnummer (lido00113) is dynamic, it is equavalent to gesah:current_inventory_number-->
                                <lido:workID lido:type="http://terminology.lido-schema.org/lido00113"><xsl:value-of select="//gesah:current_inventory_number[1]/text()[1]"/></lido:workID>
                                <xsl:for-each select="//gesah:former_inventory_number">
                                    <lido:workID lido:type="http://terminology.lido-schema.org/lido00188"><xsl:value-of select="text()"/></lido:workID>
                                </xsl:for-each>
                                <!-- this is static , always Hannover-->
                                <lido:repositoryLocation>
                                    <lido:placeID lido:type="http://terminology.lido-schema.org/lido00099">http://www.wikidata.org/entity/Q1715</lido:placeID>
                                    <lido:namePlaceSet>
                                        <lido:appellationValue xml:lang="de">Hannover</lido:appellationValue>
                                    </lido:namePlaceSet>
                                    <!-- Bundesland -->
                                    <lido:partOfPlace>
                                        <lido:placeID lido:type="http://terminology.lido-schema.org/lido00099">http://www.wikidata.org/entity/Q1197</lido:placeID>
                                        <lido:namePlaceSet>
                                            <lido:appellationValue xml:lang="en">Lower Saxony</lido:appellationValue>
                                            <lido:appellationValue xml:lang="de">Niedersachsen</lido:appellationValue>
                                        </lido:namePlaceSet>
                                        <!-- Land -->
                                        <lido:partOfPlace>
                                            <lido:placeID lido:type="http://terminology.lido-schema.org/lido00099">http://www.wikidata.org/entity/Q183</lido:placeID>
                                            <lido:namePlaceSet>
                                                <lido:appellationValue xml:lang="en">Germany</lido:appellationValue>
                                                <lido:appellationValue xml:lang="de">Deutschland</lido:appellationValue>
                                            </lido:namePlaceSet>
                                        </lido:partOfPlace>
                                    </lido:partOfPlace>
                                </lido:repositoryLocation>

                                <!-- the URI of the cultural object and current date -->
                                <!-- LIDO 1.1
                                <sourceRepositorySet>
                                    <xsl:variable name="today_date" select="current-date()"/>
                                    <xsl:value-of select="concat($uri, ' [', format-date($today_date,'[Y0001].[M01].[D01]'), ']')" />
                                </sourceRepositorySet>
                                -->
                            </lido:repositorySet>
                        </lido:repositoryWrap>

                        <xsl:if test="//gesah:plate_state or //gesah:print_run">
                            <lido:displayStateEditionWrap>
                                <xsl:for-each select="//gesah:plate_state">
                                    <lido:displayState>
                                        <xsl:value-of select="text()" />
                                    </lido:displayState>
                                </xsl:for-each>
                                 <xsl:for-each select="//gesah:print_run">
                                    <lido:displayEdition>
                                        <xsl:value-of select="text()" />
                                    </lido:displayEdition>
                                </xsl:for-each>
                            </lido:displayStateEditionWrap>
                        </xsl:if>

                        <lido:objectDescriptionWrap>
                            <!-- this is dynamic data property of CO gesah:description, it is a general description and has no type -->
                            <xsl:if test="//gesah:description">
                                <lido:objectDescriptionSet>
                                    <lido:descriptiveNoteValue xml:lang="de">
                                        <xsl:value-of select="//gesah:description/text()" />
                                    </lido:descriptiveNoteValue>
                                </lido:objectDescriptionSet>
                            </xsl:if>

                               <!-- this is dynamic and data property of CO gesah:condition_state, it is a special aspect that is described, in gesah therefore its own property, in LIDO it has a type-->
                            <xsl:if test="//gesah:condition_state">
                                <lido:objectDescriptionSet lido:type="http://terminology.lido-schema.org/lido00268">
                                    <lido:descriptiveNoteValue xml:lang="de">
                                        <xsl:value-of select="//gesah:condition_state/text()" />
                                    </lido:descriptiveNoteValue>
                                </lido:objectDescriptionSet>
                            </xsl:if>
                        </lido:objectDescriptionWrap>

                        <lido:objectMeasurementsWrap>
                            <!-- This is dynamic, in Vitro it is object property gesah:has_measurements of CO with gesah:measurement_height, gesah:measurement_width, gesah:measurement_diameter and gesah:has_measurement_specification, there are four types of measurment specification: support, plate, sheet and image in German and English. In the aviarium example plate and image is not existant-->
                            <lido:objectMeasurementsSet>
                                <xsl:for-each select="local:get(//gesah:has_measurements)">
                                    <xsl:variable name="measurement_height" select="./gesah:measurement_height/text()" />
                                    <xsl:variable name="measurement_width" select="./gesah:measurement_width/text()" />
                                    <xsl:variable name="measurement_diameter" select="./gesah:measurement_diameter/text()" />
                                    <xsl:variable name="measurement_depth" select="./gesah:measurement_depth/text()" />

                                    <xsl:for-each select="local:get(gesah:has_measurement_specification)/rdfs:label">
                                        <xsl:value-of select="local:get(./gesah:has_measurement_specification)/rdfs:label" />
                                        <lido:displayObjectMeasurements>
                                            <xsl:variable name="lang" select="@xml:lang" />
                                            <xsl:attribute name="xml:lang">
                                                <xsl:value-of select="$lang" />
                                            </xsl:attribute>
                                            <xsl:value-of select="text()" />
                                            <xsl:text>: </xsl:text>
                                            <xsl:choose>
                                                <xsl:when test="$measurement_diameter">
                                                     <xsl:value-of select="$measurement_diameter" />
                                                    <xsl:choose>
                                                        <xsl:when test="$lang = 'de-DE'">
                                                            <xsl:text> (Durchmesser)</xsl:text>
                                                        </xsl:when>
                                                        <xsl:when test="$lang = 'en-US'">
                                                            <xsl:text> (diameter)</xsl:text>
                                                        </xsl:when>
                                                        <xsl:otherwise>
                                                           </xsl:otherwise>
                                                    </xsl:choose>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                     <xsl:value-of select="$measurement_height" />
                                                    <xsl:text> x </xsl:text>
                                                    <xsl:value-of select="$measurement_width" />
                                                </xsl:otherwise>
                                            </xsl:choose>
                                            <xsl:if test="$measurement_depth">
                                                <xsl:text> x </xsl:text>
                                                <xsl:value-of select="$measurement_depth" />
                                            </xsl:if>
                                        </lido:displayObjectMeasurements>
                                    </xsl:for-each>
                                </xsl:for-each>
                            </lido:objectMeasurementsSet>
                        </lido:objectMeasurementsWrap>

                    </lido:objectIdentificationWrap>
                    <xsl:if test="//gesah:output_of_creation|//gesah:output_of_production|//gesah:object_of_edition|//gesah:object_of_event|//gesah:has_watermark|//gesah:object_of_preservation|//gesah:object_of_provenance">
                        <lido:eventWrap>
                            <xsl:for-each select="//gesah:output_of_creation[local:is-initialization-of-object(current(), $type) = true()]|
                                                  //gesah:output_of_production[local:is-initialization-of-object(current(), $type) = true()]|
                                                  //gesah:object_of_edition[local:is-initialization-of-object(current(), $type) = true()]">
								<xsl:choose>
	                                <xsl:when test="position() = 1">
			                            <xsl:call-template name="creation-production-edition">
									        <xsl:with-param name="cultural_object" select="$cultural_object" />
									        <xsl:with-param name="type" select="$type" />
		                                	<xsl:with-param name="is-culture-and-period-output" select="true()" />
									    </xsl:call-template>
                                    </xsl:when>
                                    <xsl:otherwise>
			                            <xsl:call-template name="creation-production-edition">
									        <xsl:with-param name="cultural_object" select="$cultural_object" />
									        <xsl:with-param name="type" select="$type" />
		                                	<xsl:with-param name="is-culture-and-period-output" select="false()" />
									    </xsl:call-template>
                                    </xsl:otherwise>
                                </xsl:choose>
                            </xsl:for-each>
                            <xsl:for-each select="//gesah:output_of_creation[local:is-initialization-of-object(current(), $type) = false()]|
                                                  //gesah:output_of_production[local:is-initialization-of-object(current(), $type) = false()]|
                                                  //gesah:object_of_edition[local:is-initialization-of-object(current(), $type) = false()]">
	                            <xsl:call-template name="creation-production-edition">
							        <xsl:with-param name="cultural_object" select="$cultural_object" />
							        <xsl:with-param name="type" select="$type" />
							        <xsl:with-param name="is-culture-and-period-output" select="false()" />
							    </xsl:call-template>
                            </xsl:for-each>
                            <!-- object of event -->
                            <xsl:for-each select="local:get(//gesah:object_of_event)">
                                <xsl:call-template name="object-of-event-individual"/>
                            </xsl:for-each>
                            <!-- watermark-->
                            <xsl:for-each select="local:get(//gesah:has_watermark)">
                                <lido:eventSet>
                                    <lido:event>
                                        <lido:eventType>
                                            <lido:conceptID lido:type="http://terminology.lido-schema.org/lido00099">http://terminology.lido-schema.org/lido01096</lido:conceptID>
                                            <lido:term xml:lang="de">Herstellung des Exemplars</lido:term>
                                        </lido:eventType>
                                        <lido:eventMaterialsTech>
                                            <lido:materialsTech>
                                                <lido:termMaterialsTech lido:type="http://terminology.lido-schema.org/lido00427">
                                                    <lido:conceptID lido:type="http://terminology.lido-schema.org/lido00099">http://vocab.getty.edu/aat/300028749</lido:conceptID>
                                                    <xsl:for-each select="./rdfs:label">
                                                        <lido:term>
                                                            <xsl:if test="@xml:lang">
                                                                <xsl:attribute name="xml:lang">
                                                                    <xsl:value-of select="@xml:lang" />
                                                                </xsl:attribute>
                                                            </xsl:if>
                                                            <xsl:value-of select="text()" />
                                                        </lido:term>
                                                    </xsl:for-each>
                                                </lido:termMaterialsTech>
                                            </lido:materialsTech>
                                        </lido:eventMaterialsTech>
                                    </lido:event>
                                </lido:eventSet>
                            </xsl:for-each>
                            <xsl:for-each select="local:get(//gesah:object_of_preservation)">
                            	<xsl:call-template name="object-of-preservation-individual"/>
                            </xsl:for-each>
                            
                            <xsl:for-each select="local:get(//gesah:object_of_provenance)">
                            	<xsl:call-template name="object-of-provenance-individual"/>
                            </xsl:for-each>
                        </lido:eventWrap>
                    </xsl:if>

                    <lido:objectRelationWrap>
                     <!-- BR: This is on the represented subjects, we should map here: gesah:has_object_category_generic_term (object property of CO), gesah:has_object_category_narrower_term (object property of CO), gesah:depicts (object property of CO), the instances of the range classes have often Identifiers AAT, GND or ICONCLASS and others, those should be exported too -->
                        <lido:subjectWrap>
                            <lido:subjectSet>
                                <lido:subject>
                                    <xsl:for-each select="local:get($cultural_object/gesah:has_object_category_generic_term)">
                                        <lido:subjectConcept>
                                            <xsl:call-template name="terms-with-concept-id"/>
                                        </lido:subjectConcept>
                                    </xsl:for-each>

                                    <xsl:for-each select="local:get($cultural_object/gesah:has_object_category_narrower_term)">
                                        <lido:subjectConcept>
                                            <xsl:call-template name="terms-with-concept-id"/>
                                        </lido:subjectConcept>
                                    </xsl:for-each>

                                    <xsl:for-each select="local:get($cultural_object/gesah:depicts)[local:id(vitro:mostSpecificType) = 'http://ontology.tib.eu/gesah/Keyword']">
                                        <lido:subjectConcept>
                                            <xsl:call-template name="terms-with-concept-id"/>
                                        </lido:subjectConcept>
                                    </xsl:for-each>

                                    <!-- GK: Dargestelltes Objekt habe ich hier von Hand ergänzt ohne Verweis auf Normdaten.
                                      BR: this is gesah:depicts (object property) with range class gesah:depicted_object, instances can have identifiers from AAT, GND,CONA,ICONCLASS or Wikidata, those should be delivered if existant, in this example we do not have any identifier for the object-->
                                    <xsl:for-each select="local:get($cultural_object/gesah:depicts)[local:id(vitro:mostSpecificType) = 'http://ontology.tib.eu/gesah/Depicted_Object']">
                                        <lido:subjectObject>
                                            <xsl:for-each select="./rdfs:label">
                                                <lido:displayObject>
                                                    <xsl:if test="@xml:lang">
                                                        <xsl:attribute name="xml:lang">
                                                            <xsl:value-of select="@xml:lang" />
                                                        </xsl:attribute>
                                                    </xsl:if>
                                                    <xsl:value-of select="text()" />
                                                </lido:displayObject>
                                            </xsl:for-each>
                                            <xsl:if test="./gesah:AAT_ID or ./gesah:GND_ID or ./gesah:CONA_ID or ./gesah:Iconclass_ID or ./gesah:Wikidata_ID">
                                                <lido:object>
                                                    <xsl:for-each select="./gesah:AAT_ID">
                                                        <lido:objectID lido:type="http://terminology.lido-schema.org/lido00099">
                                                            <xsl:call-template name="aat-id"/>
                                                        </lido:objectID>
                                                    </xsl:for-each>
                                                    <xsl:for-each select="./gesah:GND_ID">
                                                        <lido:objectID lido:type="http://terminology.lido-schema.org/lido00099">
                                                            <xsl:call-template name="gnd-id"/>
                                                        </lido:objectID>
                                                    </xsl:for-each>
                                                    <xsl:for-each select="./gesah:CONA_ID">
                                                        <lido:objectID lido:type="http://terminology.lido-schema.org/lido00099">
                                                            <xsl:call-template name="cona-id"/>
                                                        </lido:objectID>
                                                    </xsl:for-each>
                                                    <xsl:for-each select="./gesah:Iconclass_ID">
                                                        <lido:objectID lido:type="http://terminology.lido-schema.org/lido00099">
                                                            <xsl:call-template name="iconclass-id"/>
                                                        </lido:objectID>
                                                    </xsl:for-each>
                                                    <xsl:for-each select="./gesah:Wikidata_ID">
                                                        <lido:objectID lido:type="http://terminology.lido-schema.org/lido00099">
                                                            <xsl:call-template name="wikidata-id"/>
                                                        </lido:objectID>
                                                    </xsl:for-each>
                                                </lido:object>
                                            </xsl:if>
                                        </lido:subjectObject>
                                    </xsl:for-each>

                                    <!--BR: we have range class gesah:depicted_person which could be mapped too, I guess. This is added by me. We do not have a depicted person in this example, but it should be as follows, with GND, ICONCLASS, ULAN or Wikidata -identifier if existant:-->
                                    <xsl:for-each select="local:get($cultural_object/gesah:depicts)[local:id(vitro:mostSpecificType) = 'http://ontology.tib.eu/gesah/Depicted_Person']">
                                        <lido:subjectActor>
                                            <lido:actorID lido:type="http://terminology.lido-schema.org/lido00099">
                                                <xsl:choose>
                                                    <xsl:when test="./gesah:GND_ID">
                                                        <xsl:for-each select="./gesah:GND_ID[1]">
                                                            <xsl:call-template name="gnd-id"/>
                                                        </xsl:for-each>
                                                    </xsl:when>
                                                    <xsl:when test="./gesah:Iconclass_ID">
                                                        <xsl:for-each select="./gesah:Iconclass_ID[1]">
                                                            <xsl:call-template name="iconclass-id"/>
                                                        </xsl:for-each>
                                                    </xsl:when>
                                                    <xsl:when test="./gesah:ULAN_ID">
                                                        <xsl:for-each select="./gesah:ULAN_ID[1]">
                                                            <xsl:call-template name="ulan-id"/>
                                                        </xsl:for-each>
                                                    </xsl:when>
                                                    <xsl:when test="./gesah:Wikidata_ID">
                                                        <xsl:for-each select="./gesah:Wikidata_ID[1]">
                                                            <xsl:call-template name="wikidata-id"/>
                                                        </xsl:for-each>
                                                    </xsl:when>
                                                </xsl:choose>
                                            </lido:actorID>
                                            <lido:nameActorSet>
                                                <xsl:for-each select="./rdfs:label">
                                                    <lido:appellationValue lido:pref="http://terminology.lido-schema.org/lido00169">
                                                        <xsl:if test="@xml:lang">
                                                            <xsl:attribute name="xml:lang">
                                                                <xsl:value-of select="@xml:lang" />
                                                            </xsl:attribute>
                                                        </xsl:if>
                                                        <xsl:value-of select="text()" />
                                                    </lido:appellationValue>
                                                </xsl:for-each>
                                            </lido:nameActorSet>
                                        </lido:subjectActor>
                                    </xsl:for-each>

                                    <!--BR: we have range class gesah:depicted_place which could be mapped here. This is added by me, too. We do not have a depicted place in this example, but it should be as follows, with GND, TGN or Wikidata -identifier if existant:-->
                                    <xsl:for-each select="local:get($cultural_object/gesah:depicts)[local:id(vitro:mostSpecificType) = 'http://ontology.tib.eu/gesah/Depicted_Place']">
                                        <lido:subjectPlace>
                                            <xsl:for-each select="./rdfs:label">
                                                <lido:displayPlace>
                                                    <xsl:if test="@xml:lang">
                                                        <xsl:attribute name="xml:lang">
                                                            <xsl:value-of select="@xml:lang" />
                                                        </xsl:attribute>
                                                    </xsl:if>
                                                    <xsl:value-of select="text()" />
                                                </lido:displayPlace>
                                            </xsl:for-each>
                                            <lido:place>
                                                <!-- BR: our graphic_location should have TGN ID and/or Geonames ID,  maybe we can export both if available-->

                                                <xsl:for-each select="./gesah:TGN_ID">
                                                    <lido:placeID lido:type="http://terminology.lido-schema.org/lido00099">
                                                        <xsl:call-template name="tgn-id"/>
                                                    </lido:placeID>
                                                </xsl:for-each>

                                                <xsl:for-each select="./gesah:GeoNames_ID">
                                                    <lido:placeID lido:type="http://terminology.lido-schema.org/lido00099">
                                                        <xsl:call-template name="geonames-id"/>
                                                    </lido:placeID>
                                                </xsl:for-each>

                                                <xsl:for-each select="./gesah:GND_ID">
                                                    <lido:placeID lido:type="http://terminology.lido-schema.org/lido00099">
                                                        <xsl:call-template name="gnd-id"/>
                                                    </lido:placeID>
                                                </xsl:for-each>

                                                <xsl:for-each select="./gesah:Wikidata_ID">
                                                    <lido:placeID lido:type="http://terminology.lido-schema.org/lido00099">
                                                        <xsl:call-template name="wikidata-id"/>
                                                    </lido:placeID>
                                                </xsl:for-each>
                                            </lido:place>
                                        </lido:subjectPlace>
                                    </xsl:for-each>
                                </lido:subject>
                            </lido:subjectSet>
                        </lido:subjectWrap>
                        <lido:relatedWorksWrap>
                            <!-- BR: This is work index entry-->
                            <xsl:for-each select="local:get($cultural_object/gesah:has_Work_Index_Entry)">
                                <lido:relatedWorkSet>
                                   <lido:relatedWork>
                                      <lido:object>
                                          <xsl:if test="./gesah:index_number_URL">
                                              <lido:objectWebResource>
                                                  <xsl:value-of select="./gesah:index_number_URL/text()" />
                                              </lido:objectWebResource>
                                          </xsl:if>
                                        <!-- BR: This is equivalent to gesah:has_Work_Index_Entry, object property to class:Work_Index and context node Work_Index_entry. We need the label of instance of class:work_Index and gesah:index_number, data propery to context node Work_Index_entry-->
                                        <lido:objectID lido:type="http://terminology.lido-schema.org/lido00100">
                                          <xsl:value-of select="concat((local:get(./gesah:is_listed_in)/rdfs:label)[1]/text(), ' ', ./gesah:index_number/text())" />
                                        </lido:objectID>
                                      </lido:object>
                                   </lido:relatedWork>
                                   <lido:relatedWorkRelType>
                                      <lido:conceptID lido:type="http://terminology.lido-schema.org/lido00099">http://terminology.lido-schema.org/lido00627</lido:conceptID>
                                      <lido:term xml:lang="en">ist Exemplar von</lido:term>
                                      <lido:term xml:lang="de">is example of</lido:term>
                                   </lido:relatedWorkRelType>
                                </lido:relatedWorkSet>
                            </xsl:for-each>


                            <!-- GK: Hier ist die Sekundärliteratur gelandet.
                            BR: This is equivalent to our data property of CO gesah:secondary_literature, this is a html field, we sometimes use hyperlinks... cfr. objectDescriptionSet, I guess it is similar-->
                            <xsl:for-each select="$cultural_object/gesah:secondary_literature">
                                <lido:relatedWorkSet>
                                   <lido:relatedWork>
                                      <lido:object>
                                        <lido:objectNote>
                                            <xsl:value-of select="text()" />
                                        </lido:objectNote>
                                      </lido:object>
                                   </lido:relatedWork>
                                   <lido:relatedWorkRelType>
                                      <lido:conceptID lido:type="http://terminology.lido-schema.org/lido00099">http://terminology.lido-schema.org/lido00617</lido:conceptID>
                                      <lido:term xml:lang="en">is documented in</lido:term>
                                      <lido:term xml:lang="de">ist dokumentiert in</lido:term>
                                   </lido:relatedWorkRelType>
                                </lido:relatedWorkSet>
                            </xsl:for-each>
                            
                            <xsl:for-each select="//gesah:is_preparatory_for | //gesah:is_based_on | //gesah:is_derived_from | //gesah:is_source_for | 
                            //gesah:has_copy | //gesah:is_copy_of | //gesah:cites | //gesah:cited | //gesah:has_counterproof | //gesah:is_counterproof_from | 
                            //gesah:is_recto_of | //gesah:is_verso_of | //gesah:has_part | //gesah:is_part_of | //gesah:is_part_of_series">
	                            <xsl:call-template name="relationship-event-related-work-set"/>
                            </xsl:for-each>
                        </lido:relatedWorksWrap>
                    </lido:objectRelationWrap>
                </lido:descriptiveMetadata>

                <lido:administrativeMetadata xml:lang="de">

                    <lido:rightsWorkWrap>
                        <lido:rightsWorkSet> <!-- This is for the real physical described object: for all our objects this is true-->
                            <lido:rightsType>
                                <!-- rdf about entfernt, Typattribut bei conceptID ergänzt -->
                                <lido:conceptID lido:type="http://terminology.lido-schema.org/lido00099">https://creativecommons.org/publicdomain/mark/1.0/</lido:conceptID>
                                <lido:term lido:pref="http://terminology.lido-schema.org/lido00169" xml:lang="en">Public Domain Mark 1.0</lido:term>
                                <lido:term lido:pref="http://terminology.lido-schema.org/lido00169" xml:lang="de">Public Domain Mark 1.0</lido:term>
                                <lido:term lido:pref="http://terminology.lido-schema.org/lido00170" xml:lang="en">No Copyright</lido:term>
                                <lido:term lido:pref="http://terminology.lido-schema.org/lido00170" xml:lang="de">Kein Urheberrechtsschutz</lido:term>
                            </lido:rightsType>
                        </lido:rightsWorkSet>
                    </lido:rightsWorkWrap>

                    <lido:recordWrap>
                    <!-- This is for the Cultural Object record: for all our Cultural Objects records this is true, the URI/record ID is dynamic the rest should be always the same-->
                        <lido:recordID lido:type="http://terminology.lido-schema.org/lido00099">
                            <xsl:value-of select="$uri" />
                        </lido:recordID>
                        <lido:recordType>
                            <lido:conceptID lido:type="http://terminology.lido-schema.org/lido00099">http://terminology.lido-schema.org/lido00141</lido:conceptID>
                            <lido:term xml:lang="en">Item-level record</lido:term>
                            <lido:term xml:lang="de">Einzelobjekt (Katalogisierungsebene)</lido:term>
                        </lido:recordType>

                        <lido:recordSource>
                            <lido:legalBodyID lido:type="http://terminology.lido-schema.org/lido00099">ld.zdb-services.de/resource/organisations/DE-89</lido:legalBodyID>
                            <lido:legalBodyName>
                                <lido:appellationValue>Technische Informationsbibliothek (TIB)</lido:appellationValue>
                            </lido:legalBodyName>
                            <lido:legalBodyWeblink>https://www.tib.eu/de/</lido:legalBodyWeblink>
                        </lido:recordSource>

                        <lido:recordRights>
                            <lido:rightsType>
                               <lido:conceptID lido:type="http://terminology.lido-schema.org/lido00099">http://creativecommons.org/publicdomain/zero/1.0/</lido:conceptID>
                               <lido:term lido:pref="http://terminology.lido-schema.org/lido00169" xml:lang="en">CC0 1.0 Universal (CC0 1.0)</lido:term>
                               <lido:term lido:pref="http://terminology.lido-schema.org/lido00169" xml:lang="de">CC0 1.0 Universal (CC0 1.0)</lido:term>
                               <lido:term lido:pref="http://terminology.lido-schema.org/lido00170" xml:lang="en">Public Domain Dedication</lido:term>
                               <lido:term lido:pref="http://terminology.lido-schema.org/lido00170" xml:lang="de">Kein Urheberrechtsschutz</lido:term>
                            </lido:rightsType>
                        </lido:recordRights>

                        <lido:recordInfoSet>
                            <lido:recordInfoLink>
                                <xsl:value-of select="$uri" />
                            </lido:recordInfoLink>
                            <lido:recordMetadataDate lido:type="http://terminology.lido-schema.org/lido00472">
                                <xsl:value-of select="$cultural_object/xsd:date/text()" />
                            </lido:recordMetadataDate>
                        </lido:recordInfoSet>
                    </lido:recordWrap>

                    <lido:resourceWrap>
                        <!-- This is on images. It sais normally one high resolution image and one small preview is delivered. The internal IDs of these files I don't know, I use here the URI of the image in Vitro.-->
                        <xsl:for-each select="local:get(//gesah:has_digital_representation)">
                            <lido:resourceSet>
                              <lido:resourceID lido:type="http://terminology.lido-schema.org/lido00099"><xsl:value-of select="@rdf:about" /></lido:resourceID>
                              <!-- Preview image-->
                              <lido:resourceRepresentation lido:type="http://terminology.lido-schema.org/lido00451">
                                <lido:linkResource lido:formatResource="image/jpeg">https://sah.tib.eu/iiif/2/<xsl:value-of select="gesah:barcode/text()" />%5Econtent%5Estreams%5E<xsl:value-of select="gesah:image_file_number/text()" />/full/350,/0/default.jpg</lido:linkResource>
                              </lido:resourceRepresentation>
                              <!-- Full size image-->
                              <lido:resourceRepresentation lido:type="http://terminology.lido-schema.org/lido00464">
                                <lido:linkResource lido:formatResource="image/jpeg">https://sah.tib.eu/iiif/2/<xsl:value-of select="gesah:barcode/text()" />%5Econtent%5Estreams%5E<xsl:value-of select="gesah:image_file_number/text()" />/full/1200,/0/default.jpg</lido:linkResource>
                              </lido:resourceRepresentation>
                              <lido:resourceSource>
                                <lido:legalBodyID lido:type="http://terminology.lido-schema.org/lido00099">ld.zdb-services.de/resource/organisations/DE-89</lido:legalBodyID>
                                <lido:legalBodyName>
                                  <lido:appellationValue>Technische Informationsbibliothek (TIB)</lido:appellationValue>
                                </lido:legalBodyName>
                              </lido:resourceSource>
                              <lido:rightsResource>
                                <lido:rightsType>
                                    <lido:conceptID lido:type="http://terminology.lido-schema.org/lido00099">https://creativecommons.org/publicdomain/mark/1.0/deed.de</lido:conceptID>
                                    <lido:term lido:pref="http://terminology.lido-schema.org/lido00169" xml:lang="en">Public Domain Mark 1.0</lido:term>
                                    <lido:term lido:pref="http://terminology.lido-schema.org/lido00169" xml:lang="de">Public Domain Mark 1.0</lido:term>
                                    <lido:term lido:pref="http://terminology.lido-schema.org/lido00170" xml:lang="en">No Copyright</lido:term>
                                    <lido:term lido:pref="http://terminology.lido-schema.org/lido00170" xml:lang="de">Kein Urheberrechtsschutz</lido:term>
                                </lido:rightsType>
                                <lido:rightsHolder>
                                  <lido:legalBodyID lido:type="http://terminology.lido-schema.org/lido00099">ld.zdb-services.de/resource/organisations/DE-MUS-89</lido:legalBodyID>
                                  <lido:legalBodyName>
                                    <lido:appellationValue>Technische Informationsbibliothek (TIB)</lido:appellationValue>
                                  </lido:legalBodyName>
                                  <lido:legalBodyWeblink lido:pref="http://terminology.lido-schema.org/lido00169">https://www.tib.eu/de/</lido:legalBodyWeblink>
                                </lido:rightsHolder>
                                <lido:creditLine>Technische Informationsbibliothek (TIB), Public Domain Mark 1.0</lido:creditLine>
                              </lido:rightsResource>
                            </lido:resourceSet>
                        </xsl:for-each>
                    </lido:resourceWrap>
                </lido:administrativeMetadata>

            </lido:lido>
        </xsl:template>
    </xsl:stylesheet>
""" .

